import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import matplotlib.pyplot as plt
import io

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "8474167681:AAGLYptHm9_uRb087zSpbEsrvKkZdVZYals"

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
class Plot:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def create_plot(self):
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –∏ –æ—Å–∏
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        ax.plot(self.x, self.y, label="–§—É–Ω–∫—Ü–∏—è", marker='o', linestyle='-', linewidth=2, color='blue')
        ax.set_xlabel("–û—Å—å –ûX")
        ax.set_ylabel("–û—Å—å –ûY")
        ax.set_title('–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏')
        ax.legend()
        ax.grid(True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
        buf = io.BytesIO()
        plt.savefig(
            buf, 
            format='png', 
            dpi=100,
            bbox_inches='tight',
            facecolor='white'
        )
        buf.seek(0)
        plt.close(fig)  # –í–∞–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Ñ–∏–≥—É—Ä—É
        return buf

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        del user_data[user_id]
        
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–Ω–∞—á–µ–Ω–∏—è X —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3,4,5)"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è X —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
        "2. –û—Ç–ø—Ä–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è Y —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
        "3. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫!\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "X: 1,2,3,4,5\n"
        "Y: 10,20,30,40,50\n\n"
        "/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è —Å–±—Ä–æ—Å–∞
@dp.message(Command("cancel"))
async def cancel_command(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_data:
        del user_data[user_id]
    await message.answer("üö´ –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = message.text.split(',')
        numbers = []
        for part in parts:
            number = float(part.strip())
            numbers.append(number)
        
        if user_id not in user_data:
            # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∑–Ω–∞—á–µ–Ω–∏—è X
            user_data[user_id] = {'x': numbers}
            await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è X: {numbers}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è Y —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
            
        elif 'x' in user_data[user_id] and 'y' not in user_data[user_id]:
            # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∑–Ω–∞—á–µ–Ω–∏—è Y
            user_data[user_id]['y'] = numbers
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if len(user_data[user_id]['x']) != len(user_data[user_id]['y']):
                error_msg = f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!\nX: {len(user_data[user_id]['x'])} —Ç–æ—á–µ–∫\nY: {len(user_data[user_id]['y'])} —Ç–æ—á–µ–∫\n–û—Ç–ø—Ä–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è Y –∑–∞–Ω–æ–≤–æ"
                del user_data[user_id]['y']  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ Y, –æ—Å—Ç–∞–≤–ª—è—è X
                await message.answer(error_msg)
                return
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            x_data = user_data[user_id]['x']
            y_data = user_data[user_id]['y']
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å Plot
            plotter = Plot(x_data, y_data)
            plot_buf = plotter.create_plot()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer_photo(photo=types.BufferedInputFile(plot_buf.getvalue(), filename="graph.png"),
                caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω!\nX: {x_data}\nY: {y_data}"
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_data[user_id]
            
    except ValueError:
        if user_id in user_data and 'x' in user_data[user_id] and 'y' not in user_data[user_id]:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ Y
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª –¥–ª—è Y! –û—Ç–ø—Ä–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è Y —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10,20,30,40,50)")
        else:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ X
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª! –û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3,4,5)")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üìä –ë–æ—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())